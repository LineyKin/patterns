Фабричный метод — это порождающий паттерн проектирования,
который определяет общий интерфейс для создания объектов в суперклассе,
позволяя подклассам изменять тип создаваемых объектов.

Отношения с другими паттернами

Многие архитектуры начинаются с применения Фабричного метода (более простого и расширяемого через подклассы) 
и эволюционируют в сторону Абстрактной фабрики, Прототипа или Строителя (более гибких, но и более сложных).

Классы Абстрактной фабрики чаще всего реализуются с помощью Фабричного метода, 
хотя они могут быть построены и на основе Прототипа.

Фабричный метод можно использовать вместе с Итератором, 
чтобы подклассы коллекций могли создавать подходящие им итераторы.

Прототип не опирается на наследование, но ему нужна сложная операция инициализации. 
Фабричный метод, наоборот, построен на наследовании, но не требует сложной инициализации.

Фабричный метод можно рассматривать как частный случай Шаблонного метода. 
Кроме того, Фабричный метод нередко бывает частью большого класса с Шаблонными методами.


Концептуальный пример

В Go невозможно реализовать классический вариант паттерна Фабричный метод, 
поскольу в языке отсутствуют возможности ООП, в том числе классы и наследственность. 
Несмотря на это, мы все же можем реализовать базовую версию этого паттерна — Простая фабрика.

В этом примере мы будем создавать разные типы оружия при помощи структуры фабрики.

Сперва, мы создадим интерфейс iGun, который определяет все методы будущих пушек. 
Также имеем структуру gun (пушка), которая применяет интерфейс iGun. 
Две конкретных пушки — ak47 и musket — обе включают в себя структуру gun и 
не напрямую реализуют все методы от iGun.

gunFactory служит фабрикой, которая создает пушку нужного типа в зависимости от аргумента на входе. 
Клиентом служит main.go . Вместо прямого взаимодействия с объектами ak47 или musket, 
он создает экземпляры различного оружия при помощи gunFactory, 
используя для контроля изготовления только параметры в виде строк.
