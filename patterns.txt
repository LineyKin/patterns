Есть три семейства паттернов:

1) Порождающие
2) Структурные
3) Поведенческие

1. Порождающие паттерны

1.1 Factory Method или Фабричный метод.
Определяет общий интерфейс для создания объектов в суперклассе, 
позволяя подклассам изменять тип создаваемых объектов.
Пройден: да.

1.2 Abstract Factory или Абстрактная фабрика.
Позволяет создавать семейства связанных объектов, 
не привязываясь к конкретным классам создаваемых объектов.
Пройден: да.

1.3 Builder или Строитель.
Позволяет создавать сложные объекты пошагово. 
Строитель даёт возможность использовать один и тот же 
код строительства для получения разных представлений объектов.

1.4 Prototype или Прототип.
Позволяет копировать объекты, не вдаваясь в подробности их реализации.

1.5 Singleton или Одиночка
Гарантирует, что у класса есть только один экземпляр, 
и предоставляет к нему глобальную точку доступа.

2. Структурные паттерны

2.1 Adapter или Адаптер.
Позволяет объектам с несовместимыми интерфейсами работать вместе.

2.2 Bridge или Мост.
Разделяет один или несколько классов на две отдельные иерархии — абстракцию и реализацию, 
позволяя изменять их независимо друг от друга.

2.3 Composite или Компоновщик.
Позволяет сгруппировать множество объектов в древовидную структуру, 
а затем работать с ней так, как будто это единичный объект.

2.4 Decorator или Декоратор.
Позволяет динамически добавлять объектам новую функциональность, 
оборачивая их в полезные «обёртки».

2.5 Facade или Фасад.
Предоставляет простой интерфейс к сложной системе классов, библиотеке или фреймворку.

2.6 Flyweight или Легковес.
Позволяет вместить бóльшее количество объектов в отведённую оперативную память. 
Легковес экономит память, разделяя общее состояние объектов между собой, 
вместо хранения одинаковых данных в каждом объекте.

2.7 Proxy или Заместитель.
Позволяет подставлять вместо реальных объектов специальные объекты-заменители. 
Эти объекты перехватывают вызовы к оригинальному объекту, позволяя сделать что-то 
до или после передачи вызова оригиналу

3. Поведенческие паттерны

3.1 Chain of Responsibility или Цепочка обязанностей.
Позволяет передавать запросы последовательно по цепочке обработчиков. 
Каждый последующий обработчик решает, может ли он обработать запрос сам 
и стоит ли передавать запрос дальше по цепи.

3.2 Command или Команда.
Превращает запросы в объекты, позволяя передавать их как аргументы 
при вызове методов, ставить запросы в очередь, логировать их, 
а также поддерживать отмену операций.

3.3 Iterator или Итератор.
Даёт возможность последовательно обходить элементы составных объектов, 
не раскрывая их внутреннего представления.

3.4 Mediator или Посредник.
Позволяет уменьшить связанность множества классов между собой, 
благодаря перемещению этих связей в один класс-посредник.

3.5 Memento (Snapshot?) или Снимок.
Позволяет сохранять и восстанавливать прошлые состояния объектов, 
не раскрывая подробностей их реализации.

3.6 Observer или Наблюдатель.
Создаёт механизм подписки, позволяющий одним объектам 
следить и реагировать на события, 
происходящие в других объектах.

3.7 State или Состояние.
Позволяет объектам менять поведение в зависимости от своего состояния. 
Извне создаётся впечатление, что изменился класс объекта.

3.8 Strategy или Стратегия.
Определяет семейство схожих алгоритмов и помещает каждый из них в собственный класс, 
после чего алгоритмы можно взаимозаменять прямо во время исполнения программы.

3.9 Template Method или Шаблонный метод.
Определяет скелет алгоритма, перекладывая ответственность 
за некоторые его шаги на подклассы. Паттерн позволяет подклассам
переопределять шаги алгоритма, не меняя его общей структуры.

3.10 Visitor или Посетитель.
Позволяет добавлять в программу новые операции, 
не изменяя классы объектов, над которыми эти операции могут выполняться.